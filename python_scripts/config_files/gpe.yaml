%YAML 1.2
---

# Operator templates
####################

gpe_proto_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_i = delta_i/(PI*tau_i^2) + 2.*R_i*V_i/tau_i"
    - "d/dt * V_i = (V_i^2 + eta_i + I_ext)/tau_i + I_ampa - I_gabaa - tau_i*(PI*R_i)^2"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (stn - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (gpe_p + str + gpe_a - X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d)"
  variables:
    R_i:
      default: output
    V_i:
      default: variable(-2.0)
    I_ampa:
      default: variable
    I_gabaa:
      default: variable
    X_ampa:
      default: variable
    X_gabaa:
      default: variable
    eta_i:
      default: 11.0
    tau_i:
      default: 14.0
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.5
    tau_gabaa_d:
      default: 5.0
    delta_i:
      default: 10.0
    stn:
      default: input
    str:
      default: input
    gpe_p:
      default: input
    gpe_a:
      default: input
    I_ext:
      default: input

gpe_arky_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_a = delta_a/(PI*tau_a^2) + 2.*R_a*V_a/tau_a"
    - "d/dt * V_a = (V_a^2 + eta_a + I_ext)/tau_a + I_ampa - I_gabaa - tau_a*(PI*R_a)^2"
    - "d/dt * I_ampa = X_ampa"
    - "d/dt * X_ampa = (stn - X_ampa*(tau_ampa_r+tau_ampa_d) - I_ampa)/(tau_ampa_r*tau_ampa_d)"
    - "d/dt * I_gabaa = X_gabaa"
    - "d/dt * X_gabaa = (gpe_a + str + gpe_p + inh - X_gabaa*(tau_gabaa_r+tau_gabaa_d) - I_gabaa)/(tau_gabaa_r*tau_gabaa_d)"
  variables:
    R_a:
      default: output
    V_a:
      default: variable(-2.0)
    I_ampa:
      default: variable
    I_gabaa:
      default: variable
    X_ampa:
      default: variable
    X_gabaa:
      default: variable
    eta_a:
      default: 11.0
    tau_a:
      default: 14.0
    tau_ampa_r:
      default: 0.8
    tau_ampa_d:
      default: 3.7
    tau_gabaa_r:
      default: 0.5
    tau_gabaa_d:
      default: 5.0
    delta_a:
      default: 10.0
    stn:
      default: input
    str:
      default: input
    gpe_p:
      default: input
    gpe_a:
      default: input
    I_ext:
      default: input
    inh:
      default: input

str_dummy_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_s = (eta_s - R_s + I) / tau_s"
  variables:
    R_s:
      default: output
    eta_s:
      default: 0.002
    tau_s:
      default: 20.0
    I:
      default: input

stn_dummy_op:
  base: OperatorTemplate
  equations:
    - "d/dt * R_e = (eta_e - R_e + I) / tau_e"
  variables:
    R_e:
      default: output
    eta_e:
      default: 0.02
    tau_e:
      default: 13.0
    I:
      default: input

sl_op:
  base: OperatorTemplate
  equations:
    - "S1 = alpha/(1 + exp(-beta*(Z1 - cos(PI*t_on/(t_on + t_off)))))"
    - "S2 = alpha/(1 + exp(-beta*(-Z1 - cos(PI*t_on/(t_on + t_off)))))"
    - "d/dt * Z1 = -2.0*PI*Z2/(t_on + t_off) + Z1*(1-Z1^2-Z2^2)"
    - "d/dt * Z2 = 2.0*PI*Z1/(t_on + t_off) + Z2*(1-Z1^2-Z2^2)"
  variables:
    S1:
      default: output
    S2:
      default: variable
    Z1:
      default: variable(1.0)
    Z2:
      default: variable(0.0)
    t_on:
      default: 5.0
    t_off:
      default: 78.0
    alpha:
      default: input(1.0)
    beta:
      default: 100.0

# population templates
######################

gpe_proto:
  base: NodeTemplate
  operators:
    - gpe_proto_op

gpe_arky:
  base: NodeTemplate
  operators:
    - gpe_arky_op

str_dummy:
  base: NodeTemplate
  operators:
    - str_dummy_op

stn_dummy:
  base: NodeTemplate
  operators:
    - stn_dummy_op

sl_driver:
  base: NodeTemplate
  operators:
    - sl_op

# circuit templates
###################

gpe_2pop:
  base: CircuitTemplate
  nodes:
    gpe_p: gpe_proto
    gpe_a: gpe_arky
    stn: stn_dummy
    str: str_dummy
  edges:
    - [gpe_p/gpe_proto_op/R_i, gpe_p/gpe_proto_op/gpe_p, null, {weight: 1.0, delay: 1.5, spread: 1.0}]
    - [gpe_p/gpe_proto_op/R_i, gpe_a/gpe_arky_op/gpe_p, null, {weight: 1.0, delay: 1.5, spread: 1.0}]
    - [gpe_a/gpe_arky_op/R_a, gpe_p/gpe_proto_op/gpe_a, null, {weight: 1.0, delay: 1.5, spread: 1.0}]
    - [gpe_a/gpe_arky_op/R_a, gpe_a/gpe_arky_op/gpe_a, null, {weight: 1.0, delay: 1.5, spread: 1.0}]
    - [stn/stn_dummy_op/R_e, gpe_p/gpe_proto_op/stn, null, {weight: 1.0}]
    - [stn/stn_dummy_op/R_e, gpe_a/gpe_arky_op/stn, null, {weight: 1.0}]
    - [str/str_dummy_op/R_s, gpe_p/gpe_proto_op/str, null, {weight: 1.0}]
    - [str/str_dummy_op/R_s, gpe_a/gpe_arky_op/str, null, {weight: 1.0}]

gpe_2pop_driver:
  base: CircuitTemplate
  nodes:
    gpe_p: gpe_proto
    gpe_a: gpe_arky
    stn: stn_dummy
    str: str_dummy
    driver: sl_driver
  edges:
    - [gpe_p/gpe_proto_op/R_i, gpe_p/gpe_proto_op/gpe_p, null, {weight: 1.0, delay: 1.5, spread: 1.0}]
    - [gpe_p/gpe_proto_op/R_i, gpe_a/gpe_arky_op/gpe_p, null, {weight: 1.0, delay: 1.5, spread: 1.0}]
    - [gpe_a/gpe_arky_op/R_a, gpe_p/gpe_proto_op/gpe_a, null, {weight: 1.0, delay: 1.5, spread: 1.0}]
    - [gpe_a/gpe_arky_op/R_a, gpe_a/gpe_arky_op/gpe_a, null, {weight: 1.0, delay: 1.5, spread: 1.0}]
    - [stn/stn_dummy_op/R_e, gpe_p/gpe_proto_op/stn, null, {weight: 1.0}]
    - [stn/stn_dummy_op/R_e, gpe_a/gpe_arky_op/stn, null, {weight: 1.0}]
    - [str/str_dummy_op/R_s, gpe_p/gpe_proto_op/str, null, {weight: 1.0}]
    - [str/str_dummy_op/R_s, gpe_a/gpe_arky_op/str, null, {weight: 1.0}]
    - [driver/sl_op/S1, gpe_a/gpe_arky_op/inh, null, {weight: 1.0}]
    - [driver/sl_op/S2, gpe_a/gpe_arky_op/inh, null, {weight: -1.0}]
